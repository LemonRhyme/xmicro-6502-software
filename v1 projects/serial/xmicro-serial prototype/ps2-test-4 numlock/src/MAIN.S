.PC02

.INCLUDE "INSTRUCTIONS.MAC"
.INCLUDE "XM7SEG.MAC"

	XMICRO_MEMORY = $1100
	RTC = XMICRO_MEMORY+$10

	PS2_READ = $1210
	PS2_WRITE = $1210
	PS2_SR = $1211

.SEGMENT "ZEROPAGE"

PS2_READBUFFER:		.RES 2
PS2_READSTATUS:		.RES 1
PS2_LEDS:		.RES 1

.SEGMENT "STARTUP"
_INIT:
	SEI
	CLC
	LDX #$FF
	TXS

	JSR XM7SEG_INIT
	XM7SEG_ON

;	LDA #$4C		;LOAD VECTOR WITH RTC ISR
;	STA $0204
;	LDA #.LOBYTE(RTC_ISR)
;	STA $0205
;	LDA #.HIBYTE(RTC_ISR)
;	STA $0206

	LDA #$4C		;LOAD VECTOR WITH PS2 ISR
	STA $0208
	LDA #.LOBYTE(PS2_ISR)
	STA $0209
	LDA #.HIBYTE(PS2_ISR)
	STA $020A

	LDA #$00
	STA PS2_READBUFFER+0
	STA PS2_READBUFFER+1
	STA PS2_LEDS
	STA PS2_READSTATUS

	LDA #%11000000		;SET ALARM RATE TO EVERY SECOND
	STA RTC+$01
	STA RTC+$03
	STA RTC+$05
	STA RTC+$07

	LDA #%00000000		;DISABLE RTC INTERRUPTS
	STA RTC+$0C

	LDA RTC+$0E
	ORA #%00000110		;SET 24 HOUR MODE
;	AND #%11111011		;SET 12 HOUR MODE
	STA RTC+$0E

	LDA #%00000001
	STA RTC+$0B		;Set interrupt rate


	LDX #$00
	TXA
	TAY
	CLI

	JMP _MAIN

.SEGMENT "CODE"

_MAIN:
	JMP _MAIN


PS2_ISR:
	LDA PS2_SR
	STA PS2_READSTATUS
	AND #%00100000		;CHECK INTERRUPT STATUS
	BNE PS2_READ_L0
	RTI

PS2_READ_L0:
	LDA PS2_READSTATUS
	STA XM7SEG_BUFFER+2
	AND #%00010000		;CHECK FOR PARITY ERROR
	BEQ PS2_READ_L1
		LDX #$00
	ERROR_WAIT_L0:
		DEX
		NOP
		NOP
		NOP
		NOP
		NOP
		NOP
		BNE ERROR_WAIT_L0

PS2_READ_L1:			;READ THE DATA
	LDA PS2_READBUFFER+0
	STA PS2_READBUFFER+1
	LDA PS2_READ
	STA PS2_READBUFFER+0


DISPLAYUPDATE:
	LDA PS2_READBUFFER+1
	STA XM7SEG_BUFFER+1
	LDA PS2_READBUFFER+0
	STA XM7SEG_BUFFER+0
	JSR XM7SEG_WRITE


PS2_ACTION:
	LDA PS2_READBUFFER+1
	CMP #$F0		;CHECK IF WE HAVE A BREAK CODE
	BNE PS2_MAKE
	RTI

PS2_MAKE:
	LDA PS2_READBUFFER+0
	CMP #$77
	BEQ NUM_TOGGLE
	CMP #$58
	BEQ CAPS_TOGGLE
	CMP #$7E
	BEQ SCROLL_TOGGLE
	RTI

	NUM_TOGGLE:
		LDA PS2_LEDS
		EOR #%00000010
		JMP PS2_WRITELED

	CAPS_TOGGLE:
		LDA PS2_LEDS
		EOR #%00000100
		JMP PS2_WRITELED

	SCROLL_TOGGLE:
		LDA PS2_LEDS
		EOR #%00000001
		JMP PS2_WRITELED

PS2_WRITELED:
	STA PS2_LEDS
	TAX
PS2_WRITELED_L0:
	LDA PS2_SR
	AND #%00001000		;CHECK IF THE KEYBOARD IS IN A WRITE CYCLE.
	BNE PS2_WRITELED_L0	;LOOP UNTIL IT ISN'T.
	LDA #$ED
	STA PS2_WRITE

	JSR ACKLOOP
	CMP #$FA
	;BNE PS2_WRITELED_L0
	STA XM7SEG_BUFFER+1

PS2_WRITELED_L1:
	LDA PS2_SR
	AND #%00001000		;CHECK IF THE KEYBOARD IS IN A WRITE CYCLE.
	BNE PS2_WRITELED_L1	;LOOP UNTIL IT ISN'T.
	STX PS2_WRITE

	JSR ACKLOOP
	CMP #$FA
	;BNE PS2_WRITELED_L0
	STA XM7SEG_BUFFER+0
	LDA #$00
	STA XM7SEG_BUFFER+2
	JSR XM7SEG_WRITE

	RTI

ACKLOOP:			;WAIT FOR THE NEXT READ BYTE
	LDA PS2_SR
	AND #%00100000
	BEQ ACKLOOP
	LDA PS2_READ
	RTS
