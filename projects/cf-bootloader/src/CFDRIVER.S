;	COMPACTFLASH DRIVER FOR XMICRO-MEMORY
;
;	PUBLIC VARIABLES:
;	CF_LBA			(DWORD)	LBA/CHS ADDRESS
;	CF_BUFFER		(WORD)	SECTOR BUFFER LOCATION POINTER (NOT CURRENTLY CHANGEABLE, BUT COULD BE MODIFIED TO SKIP BUFFERING AND COPY FILES DIRECTLY TO THEIR DESTINATION)
;
;	PUBLIC PROCEDURES:
;	CF_INIT				INITIALIZE THE CF CARD AND DRIVER VARIABLES
;	CF_READ_SECTOR			READ A SECTOR USING LBA ADDRESSING MODE
;
;	REQUIRED EXTERNAL VARIABLES:
;	XMICRO_MEMORY			BASE ADDRESS OF THE XMICRO-MEMORY CARD
;
;	2018-03-27

;TO DO:
;PUSH USED REGISTERS TO THE STACK

;NEEDS A TIMEOUT ON WAIT LOOPS.
;ADD ERROR CODE VARIABLE
;CHECK FOR ERRORS DURING/AFTER TRANSFER AND RETURN AN ERROR CODE

;-----------------------------------------------------------------------------
;
;	COMPACTFLASH DRIVER
;	2018-02-10
;
;	ADAPTED FROM MATTHEW COOK'S Z80 DRIVER
;	HTTPS://GITHUB.COM/MATTHEWWCOOK/Z80PROJECT
;
;-----------------------------------------------------------------------------

.INCLUDE "INSTRUCTIONS.MAC"

.IMPORT XMICRO_MEMORY
.EXPORT CF_INIT, CF_READ_SECTOR
.EXPORTZP CF_BUFFERPOINTER
.EXPORT CF_BUFFER, CF_LBA

;CF CARD REGISTER CONSTANTS
	CFDATA	= XMICRO_MEMORY + $00		;DATA (R/W)
	CFERR	= XMICRO_MEMORY + $01		;ERROR REGISTER (R)
	CFFEAT	= XMICRO_MEMORY + $01		;FEATURE REGISTER (W)
	CFSECCO	= XMICRO_MEMORY + $02		;SECTOR COUNT (R/W)
	CFLBA0	= XMICRO_MEMORY + $03		;LBA BITS 7-0 (R/W, LBA MODE)
	CFLBA1	= XMICRO_MEMORY + $04		;LBA BITS 16-8 (R/W, LBA MODE)
	CFLBA2	= XMICRO_MEMORY + $05		;LBA BITS 23-17 (R/W, LBA MODE)
	CFLBA3	= XMICRO_MEMORY + $06		;LBA BITS 27-24 (R/W, LBA MODE)
	CFSTAT	= XMICRO_MEMORY + $07		;STATUS (R)/COMMAND(W) REGISTER
	CFCMD	= XMICRO_MEMORY + $07		;COMMAND (W)
	XM_MEM_SR = XMICRO_MEMORY + $D0		;XMICRO-MEMORY STATUS REGISTER

;VARIABLES
.SEGMENT "ZEROPAGE"
;BUFFER_POS:		.RES 2		;WHERE TO STORE THE BASE ADDRESS VALUE
CF_BUFFERPOINTER:	.RES 2		;POINTER FOR SECTOR BUFFER OPERATIONS

.SEGMENT "BSS"
CF_LBA:			.RES 4		;ADDRESS VALUE TO PASS TO THE CARD

.SEGMENT "DATA"
CF_BUFFER:		.WORD $DE00	;DEFAULT SECTOR BUFFER LOCATION

.SEGMENT "LOWCODE"

;-----------------------------------------------------------------------------
;INIT
;FUNCTION: INITIALIZE CF TO 8 BIT DATA TRANSFER MODE
;-----------------------------------------------------------------------------
.PROC CF_INIT
	PHA
	MWA CF_BUFFER, CF_BUFFERPOINTER			;INITIALIZE THE SECTOR BUFFER VARIABLE
	LDA #$00
	STA CF_LBA+0				;INITIALIZE THE LBA VARIABLE
	STA CF_LBA+1
	STA CF_LBA+2
	STA CF_LBA+3

	JSR LOOP_BUSY
	LDA #$01				;SET FEATURE REGISTER TO ENABLE 8-BIT TRANSFERS
	STA CFFEAT
	JSR LOOP_BUSY
	LDA #$EF				;SEND "SET FEATURES" COMMAND
	STA CFCMD
	JSR LOOP_BUSY
	LDA #$82				;SET FEATURE REGISTER TO DISABLE WRITE CACHING
	STA CFFEAT
	JSR LOOP_BUSY
	LDA #$EF				;SEND "SET FEATURES" COMMAND
	STA CFCMD
	JSR LOOP_BUSY
	PLA
	RTS
.ENDPROC


;-----------------------------------------------------------------------------
;LOOP_BUSY
;FUNCTION: LOOPS UNTIL STATUS REGISTER BIT 7 (BUSY) IS 0
;-----------------------------------------------------------------------------
.PROC LOOP_BUSY
	LDA CFSTAT				;READ STATUS
	AND #%10000000				;MASK BUSY BIT
	BNE LOOP_BUSY				;LOOP UNTIL BUSY(7) IS 0
	RTS
.ENDPROC


;-----------------------------------------------------------------------------
;LOOP_CMD_RDY
;FUNCTION: LOOPS UNTIL STATUS REGISTER BIT 7 (BUSY) IS 0 AND DRVRDY(6) IS 1
;-----------------------------------------------------------------------------
.PROC LOOP_CMD_RDY
	LDA CFSTAT				;READ STATUS
	AND #%11000000				;MASK OFF BUSY AND READY BITS
	EOR #%01000000				;WE WANT BUSY(7) TO BE 0 AND DRVRDY(6) TO BE 1
	BNE LOOP_CMD_RDY
	RTS
.ENDPROC

;-----------------------------------------------------------------------------
;LOOP_DAT_RDY
;FUNCTION: LOOPS UNTIL STATUS REGISTER BIT 7 (BUSY) IS 0 AND DRQ(3) IS 1
;-----------------------------------------------------------------------------
.PROC LOOP_DAT_RDY
	LDA CFSTAT				;READ STATUS
	AND #%10001000				;MASK OFF BUSY AND DRQ BITS
	EOR #%00001000				;WE WANT BUSY(7) TO BE 0 AND DRQ(3) TO BE 1
	BNE LOOP_DAT_RDY
	RTS
.ENDPROC

;-----------------------------------------------------------------------------
;LOAD_LBA
;FUNCTION: LOADS AN ADDRESS FROM CF_LBA INTO THE CARD REGISTERS AND MAKES SURE THE CARD IS IN THE CORRECT MODE.
;MODE SELECTION IS DONE WITH THE X REGISTER - $00 = CHS MODE, $01 = LBA MODE
;-----------------------------------------------------------------------------
.PROC LOAD_LBA
	JSR LOOP_BUSY
	LDA CF_LBA+0
	STA CFLBA0
	JSR LOOP_BUSY
	LDA CF_LBA+1
	STA CFLBA1
	JSR LOOP_BUSY
	LDA CF_LBA+2
	STA CFLBA2
	JSR LOOP_BUSY
	LDA CF_LBA+3
	ORA #%11100000				;MAKE SURE CARD IS IN LBA MODE AND AN IMPROPER VALUE ONLY AFFECTS THE LBA
	AND #%11101111
	STA CFLBA3
	JSR LOOP_BUSY
	RTS
.ENDPROC

;-----------------------------------------------------------------------------
;RD_CMD
;FUNCTION: GETS A SECTOR (512 BYTES) INTO RAM BUFFER.
;-----------------------------------------------------------------------------
.PROC RD_CMD
	JSR LOOP_BUSY
	LDA #$01				;ONLY READ ONE SECTOR AT A TIME (OTHERWISE DEFAULTS TO 255)
	STA CFSECCO
	JSR LOOP_CMD_RDY			;MAKE SURE DRIVE IS READY FOR COMMAND
	LDA #$20				;PREPARE READ COMMAND
	STA CFCMD				;SEND READ COMMAND
	JSR LOOP_DAT_RDY			;WAIT UNTIL DATA IS READY TO BE READ
	LDA CFSTAT				;READ STATUS
	AND #%00000001				;MASK OFF ERROR BIT
	BNE RD_CMD				;TRY AGAIN IF THERE WAS AN ERROR
	MWA CF_BUFFER, CF_BUFFERPOINTER

	LDY #$00				;READ 256 BYTES PER LOOP
	LDX #$02				;LOOP TWICE
RD_SECT:
	JSR LOOP_DAT_RDY
	LDA CFDATA
	STA (CF_BUFFERPOINTER),Y
	INY
	BNE RD_SECT				;LOOP UNLESS Y=0
	INC CF_BUFFERPOINTER+1			;INCREMENT THE CF DATA BUFFER PAGE FOR THE NEXT 256 BYTES
	DEX					;IF Y=0, DECREMENT X
	BNE RD_SECT
	RTS					;IF X=0, END THE PROCEDURE.
.ENDPROC

;-----------------------------------------------------------------------------
;CF_READ_SECTOR
;FUNCTION: GETS A SECTOR (512 BYTES) INTO RAM BUFFER USING AN LBA ADDRESS
;-----------------------------------------------------------------------------
.PROC CF_READ_SECTOR			;NEEDS ADDR PASSED TO CF_LBA
	PUSH_AXY
	JSR LOAD_LBA
	JSR RD_CMD
	PULL_AXY
	RTS
.ENDPROC
