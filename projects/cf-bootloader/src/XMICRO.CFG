##############################################################################
#
# LD65 Linker configuration for XMICRO-6502 ROM images
#
##############################################################################

MEMORY {
	ZP:	start = $0000,	size = $0100,	type = rw,	define = yes;
	STACK:	start = $0100,	size = $0100,	type = ro;
	VT:	start = $0200,	size = $0200,	type = rw;
	PRAM:	start = $0400,	size = $6C00,	type = rw;
	IO:	start = $7000,	size = $1000,	type = rw;
	ROM:	start = $F000,	size = $1000,	type = ro,	bank = $1,	fill = yes,	 fillval = $FF,	file = "ROM.BIN";

	BANK0:	start = $8000,	size = $8000,	type = rw,	bank = $0;
	BANK1:	start = $8000,	size = $7000,	type = rw,	bank = $1,	define = yes;
	BANK2:	start = $8000,	size = $8000,	type = rw,	bank = $2;
	BANK3:	start = $8000,	size = $8000,	type = rw,	bank = $3;
	BANK4:	start = $8000,	size = $8000,	type = rw,	bank = $4;
	BANK5:	start = $8000,	size = $8000,	type = rw,	bank = $5;
	BANK6:	start = $8000,	size = $8000,	type = rw,	bank = $6;
	BANK7:	start = $8000,	size = $8000,	type = rw,	bank = $7;
	BANK8:	start = $8000,	size = $8000,	type = rw,	bank = $8;
	BANK9:	start = $8000,	size = $8000,	type = rw,	bank = $9;
	BANKA:	start = $8000,	size = $8000,	type = rw,	bank = $A;
	BANKB:	start = $8000,	size = $8000,	type = rw,	bank = $B;
	BANKC:	start = $8000,	size = $8000,	type = rw,	bank = $C;
	BANKD:	start = $8000,	size = $8000,	type = rw,	bank = $D;
	BANKE:	start = $8000,	size = $8000,	type = rw,	bank = $E;
	BANKF:	start = $8000,	size = $8000,	type = rw,	bank = $F;
}

SEGMENTS {
    #ROM Segments
	STARTUP:	load = ROM,	type = ro;
	ONCE:		load = ROM,	type = ro,	optional = yes;
	CODE:		load = ROM,	type = ro;
	RODATA:		load = ROM,	type = ro;

    #RAM Segments
    	ZEROPAGE:	load = ZP,	type = zp,	optional = yes,	define = yes;
	VECTORTABLE:	load = ROM,	type = rw,	optional = yes,	define = yes,	run = VT;
    	LOWCODE:	load = ROM,	type = rw,	optional = yes,	define = yes,	run = PRAM;
	DATA:		load = ROM,	type = rw,	define = yes,	run = PRAM;
	BSS:		load = PRAM,	type = bss,	define = yes;
	HEAP:		load = PRAM,	type = bss,	optional = yes;

	INFO:		load = ROM,	type = ro,	start = $FFF0,	optional = yes;
	VECTORS:	load = ROM,	type = ro,	start = $FFFA;
}

FEATURES {
	CONDES:	segment = STARTUP,
		type    = constructor,
		label   = __CONSTRUCTOR_TABLE__,
		count   = __CONSTRUCTOR_COUNT__;
	CONDES:	segment = STARTUP,
		type    = destructor,
		label   = __DESTRUCTOR_TABLE__,
		count   = __DESTRUCTOR_COUNT__;

	STARTADDRESS:	default = $F000;
}

SYMBOLS {
	# Define the stack size for the application
	__STACKSIZE__:  type = weak, value = $0200;
}
