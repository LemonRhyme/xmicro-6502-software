;-----------------------------------------------------------------------------
; MATH_32.S
; 32-BIT MATH PROCEDURES
; ADAPTED FROM HTTPS://GITHUB.COM/MAIKMERTEN/TINYLOAD
;-----------------------------------------------------------------------------

.INCLUDE "INSTRUCTIONS.MAC"

.EXPORT MATH_ADD32, MATH_SUB32, MATH_MUL32, MATH_DIV32		;PROCEDURES
.EXPORTZP M32PTR1, M32PTR2, M32PTR3, M32PTR4			;ZERO-PAGE VARIABLES

.SEGMENT "ZEROPAGE"
	M32PTR1:	.RES 2		;16-BIT POINTERS TO 32-BIT MATH PARAMETERS
	M32PTR2:	.RES 2
	M32PTR3:	.RES 2
	M32PTR4:	.RES 2

	TMP1:		.RES 4		;TEMPORARY 32-BIT VARIABLES
	TMP2:		.RES 4
	TMP3:		.RES 4
	TMP4:		.RES 4

.SEGMENT "CODE"

;-----------------------------------------------------------------------------
; MATH_ADD32 (M32PTR1, M32PTR2, M32PTR3)
; 32-BIT ADDITION - M32PTR1 + M32PTR2 = M32PTR3
; PERFORMS A 32-BIT ADDITION OF M32PTR1 + M32PTR2, RETURNS RESULT TO M32PTR3
;-----------------------------------------------------------------------------
.PROC MATH_ADD32
	PUSH_AY
	CLC
	PHP

	LDY #0
LOOP:
	PLP
	LDA (M32PTR1),Y
	ADC (M32PTR2),Y
	STA (M32PTR3),Y
	PHP
	INY
	CPY #4
	BNE LOOP

	PLP
	PULL_AY
	RTS
.ENDPROC

;-----------------------------------------------------------------------------
; MATH_SUB32 (M32PTR1, M32PTR2, M32PTR3)
; 32-BIT ADDITION - M32PTR1-M32PTR2=M32PTR3
; PERFORMS A 32-BIT SUBTRACTION OF M32PTR1-M32PTR2, RETURNS RESULT TO M32PTR3
;-----------------------------------------------------------------------------
.PROC MATH_SUB32
	PUSH_AY

	SEC
	PHP
	LDY #0
LOOP:
	PLP				;GET CARRY BACK FROM STACK
	LDA (M32PTR1),Y
	SBC (M32PTR2),Y
	STA (M32PTR3),Y
	PHP
	INY
	CPY #4				;THIS RUINS THE CARRY FLAGS
	BNE LOOP

	PLP

	PULL_AY
	RTS
.ENDPROC

;-----------------------------------------------------------------------------
; MATH_MUL32 (M32PTR1, M32PTR2, M32PTR3)
; 32-BIT MULTIPLICATION - M32PTR1*M32PTR2=M32PTR3
; PERFORMS A 32-BIT MULTIPLICATION OF M32PTR1*M32PTR2, RETURNS RESULT TO M32PTR3
;-----------------------------------------------------------------------------
.PROC MATH_MUL32
	PUSH_AY

	LDY #0
LOOP_INIT:
	LDA (M32PTR1),Y
	STA TMP1,Y
	LDA (M32PTR2),Y
	STA TMP2,Y
	LDA #0
	STA (M32PTR3),Y
	INY
	CPY #4
	BNE LOOP_INIT

LOOP:
	LSR TMP2+3
	ROR TMP2+2
	ROR TMP2+1
	ROR TMP2
	BCC SKIP_ADD	;IF LEAST-SIGNIFICANT BIT WASN'T SET, SKIP ADDITION

	LDY #0
	CLC
	PHP
LOOP_ADD:
	PLP
	LDA (M32PTR3),Y
	ADC TMP1,Y
	STA (M32PTR3),Y
	PHP
	INY
	CPY #4
	BNE LOOP_ADD
	PLP		;CLEAN UP STACK


SKIP_ADD:
	ASL TMP1	;SHIFT LEFT...
	ROL TMP1+1	;...AND ROTATE CARRY BIT IN FROM LOW TO HIGH
	ROL TMP1+2
	ROL TMP1+3

	LDA TMP2	;CHECK IF FACTOR IS ZERO ALREADY
	ORA TMP2+1
	ORA TMP2+2
	ORA TMP2+3
	BNE LOOP

	PULL_AY
	RTS
.ENDPROC

;-----------------------------------------------------------------------------
; MATH_DIV32 (M32PTR1, M32PTR2, M32PTR3, M32PTR4)
; 32-BIT DIVISION - M32PTR1/M32PTR2=M32PTR3 R M32PTR4
; PERFORMS A 32-BIT DIVISION OF M32PTR1/M32PTR2
; RETURNS RESULT TO M32PTR3 AND REMAINDER TO M32PTR4
;-----------------------------------------------------------------------------
.PROC MATH_DIV32
	PUSH_AXY

	;SOME MAPPING OF LABELS
	DIVIDEND = TMP1
	DIVISOR = TMP2
	REMAINDER = TMP3
	RESULT = DIVIDEND
	TEMP = TMP4


	LDY #0
LOOP_INIT:
	LDA (M32PTR1),Y
	STA DIVIDEND,Y		;COPY ARGUMENT 1
	LDA (M32PTR2),Y
	STA DIVISOR,Y		;COPY ARGUMENT 2
	LDA #0
	STA REMAINDER,Y		;PRESET REMAINDER TO ZERO
	INY
	CPY #4
	BNE LOOP_INIT


	LDX #32			;REPEAT FOR EACH BIT: ...
DIVLOOP:
	ASL DIVIDEND		;DIVIDEND*2, MSB -> CARRY
	ROL DIVIDEND+1
	ROL DIVIDEND+2
	ROL DIVIDEND+3
	ROL REMAINDER		;REMAINDER*2 + MSB FROM CARRY
	ROL REMAINDER+1
	ROL REMAINDER+2
	ROL REMAINDER+3


	LDY #0
	SEC
	PHP
LOOP_SUBTRACT:
	PLP
	LDA REMAINDER,Y
	SBC DIVISOR,Y
	STA TEMP,Y
	PHP
	INY
	CPY #4
	BNE LOOP_SUBTRACT
	PLP				;CLEAN UP STACK AND RESTORE CARRY FOR NEXT BRANCH

	BCC SKIP			;IF CARRY=0 THEN DIVISOR DIDN'T FIT IN YET
	MDA TEMP, REMAINDER		;ELSE SUBSTRACTION RESULT IS NEW REMAINDER
	INC RESULT			;AND INCREMENT RESULT CAUSE DIVISOR FIT IN 1 TIMES

SKIP:
	DEX
	BNE DIVLOOP


	LDY #0
LOOP_COPY_RESULT:
	LDA RESULT,Y
	STA (M32PTR3),Y
	LDA REMAINDER,Y
	STA (M32PTR4),Y
	INY
	CPY #4
	BNE LOOP_COPY_RESULT

	PULL_AXY
	RTS
.ENDPROC
