##############################################################################
#
# LD65 LINKER CONFIGURATION FOR XMICRO-6502 AUTOEXEC BINARIES
#
##############################################################################

MEMORY {
	ZP:	start = $0000,	size = $0100,	type = rw,	define = yes;
	STACK:	start = $0100,	size = $0100,	type = ro;
	VT:	start = $0200,	size = $0200,	type = rw,	define = yes;	#INTERRUPT VECTOR TABLE
	PRAM:	start = $0400,	size = $6C00,	type = rw;			#PERSISTENT (NON-BANKABLE) MEMORY
	IO:	start = $7000,	size = $1000,	type = rw,	define = yes;	#I/O SPACE FOR XMICRO BUS CARDS
	ROM:	start = $F000,	size = $1000,	type = ro,	bank = $01;	#XMICRO-MEMORY BOOT ROM

	BANK00:	start = $8000,	size = $8000,	type = rw,	bank = $00;
	BANK01:	start = $8000,	size = $7000,	type = rw,	bank = $01,	define = yes,	file = %O;
	BANK02:	start = $8000,	size = $8000,	type = rw,	bank = $02;
	BANK03:	start = $8000,	size = $8000,	type = rw,	bank = $03;
	BANK04:	start = $8000,	size = $8000,	type = rw,	bank = $04;
	BANK05:	start = $8000,	size = $8000,	type = rw,	bank = $05;
	BANK06:	start = $8000,	size = $8000,	type = rw,	bank = $06;
	BANK07:	start = $8000,	size = $8000,	type = rw,	bank = $07;
	BANK08:	start = $8000,	size = $8000,	type = rw,	bank = $08;
	BANK09:	start = $8000,	size = $8000,	type = rw,	bank = $09;
	BANK0A:	start = $8000,	size = $8000,	type = rw,	bank = $0A;
	BANK0B:	start = $8000,	size = $8000,	type = rw,	bank = $0B;
	BANK0C:	start = $8000,	size = $8000,	type = rw,	bank = $0C;
	BANK0D:	start = $8000,	size = $8000,	type = rw,	bank = $0D;
	BANK0E:	start = $8000,	size = $8000,	type = rw,	bank = $0E;
	BANK0F:	start = $8000,	size = $8000,	type = rw,	bank = $0F;
	BANK10:	start = $8000,	size = $8000,	type = rw,	bank = $10;
	BANK11:	start = $8000,	size = $7000,	type = rw,	bank = $11;
	BANK12:	start = $8000,	size = $8000,	type = rw,	bank = $12;
	BANK13:	start = $8000,	size = $8000,	type = rw,	bank = $13;
	BANK14:	start = $8000,	size = $8000,	type = rw,	bank = $14;
	BANK15:	start = $8000,	size = $8000,	type = rw,	bank = $15;
	BANK16:	start = $8000,	size = $8000,	type = rw,	bank = $16;
	BANK17:	start = $8000,	size = $8000,	type = rw,	bank = $17;
	BANK18:	start = $8000,	size = $8000,	type = rw,	bank = $18;
	BANK19:	start = $8000,	size = $8000,	type = rw,	bank = $19;
	BANK1A:	start = $8000,	size = $8000,	type = rw,	bank = $1A;
	BANK1B:	start = $8000,	size = $8000,	type = rw,	bank = $1B;
	BANK1C:	start = $8000,	size = $8000,	type = rw,	bank = $1C;
	BANK1D:	start = $8000,	size = $8000,	type = rw,	bank = $1D;
	BANK1E:	start = $8000,	size = $8000,	type = rw,	bank = $1E;
	BANK1F:	start = $8000,	size = $8000,	type = rw,	bank = $1F;
}

SEGMENTS {
	ZEROPAGE:	load = ZP,	type = zp,	define = yes;
	STARTUP:	load = BANK01,	type = ro,	define = yes;
	ONCE:		load = BANK01,	type = ro,	optional = yes;
	CONDESTABLES:	load = BANK01,	type = ro,	optional = yes;		#Special segment for constructor tables (workaround for debug script)
	CODE:		load = BANK01,	type = rw;
	DATA:		load = BANK01,	type = rw,	define = yes;
	RODATA:		load = BANK01,	type = ro;
	BSS:		load = BANK01,	type = bss,	define = yes;
	HEAP:		load = BANK01,	type = bss,	optional = yes;
	VECTORS:	load = BANK01,	type = rw,	optional = yes,	define = yes,	run = VT;
	LOWCODE:	load = BANK01,	type = rw,	optional = yes,	define = yes,	run = PRAM;
}

FEATURES {
	CONDES:	segment = CONDESTABLES,
		type    = constructor,
		label   = __CONSTRUCTOR_TABLE__,
		count   = __CONSTRUCTOR_COUNT__;
	CONDES:	segment = CONDESTABLES,
		type    = destructor,
		label   = __DESTRUCTOR_TABLE__,
		count   = __DESTRUCTOR_COUNT__;

	STARTADDRESS:	default = $8000;
}

SYMBOLS {
	# Define the stack size for the application
	__STACKSIZE__:  type = weak, value = $0200;
}

	#XMICRO SYSTEM CONFIGURATION
SYMBOLS {
	__XMICRO_6502_SLOT__:		type = weak,	value = 3;
	__XMICRO_6502_ID__:		type = weak,	value = $01;
	__XMICRO_6502_START__:		type = weak,	value = __IO_START__+(__XMICRO_6502_SLOT__*$100);
	__XMICRO_6502_VECTOR__:		type = weak,	value = __VT_START__+(__XMICRO_6502_SLOT__*$4)+1;

	__XMICRO_MEMORY_SLOT__:		type = weak,	value = 1;
	__XMICRO_MEMORY_ID__:		type = weak,	value = $02;
	__XMICRO_MEMORY_START__:	type = weak,	value = __IO_START__+(__XMICRO_MEMORY_SLOT__*$100);
	__XMICRO_MEMORY_VECTOR__:	type = weak,	value = __VT_START__+(__XMICRO_MEMORY_SLOT__*$4)+1;

	__XMICRO_7SEG_SLOT__:		type = weak,	value = 4;
	__XMICRO_7SEG_ID__:		type = weak,	value = $03;
	__XMICRO_7SEG_START__:		type = weak,	value = __IO_START__+(__XMICRO_7SEG_SLOT__*$100);

	__XMICRO_SERIAL_SLOT__:		type = weak,	value = 2;
	__XMICRO_SERIAL_ID__:		type = weak,	value = $04;
	__XMICRO_SERIAL_START__:	type = weak,	value = __IO_START__+(__XMICRO_SERIAL_SLOT__*$100);
	__XMICRO_SERIAL_VECTOR__:	type = weak,	value = __VT_START__+(__XMICRO_SERIAL_SLOT__*$4)+1;

	__XMICRO_VDP_SLOT__:		type = weak,	value = 0;
	__XMICRO_VDP_ID__:		type = weak,	value = $05;
	__XMICRO_VDP_START__:		type = weak,	value = __IO_START__+(__XMICRO_VDP_SLOT__*$100);
	__XMICRO_VDP_VECTOR__:		type = weak,	value = __VT_START__+(__XMICRO_VDP_SLOT__*$4)+1;	#IRQX
#	__XMICRO_VDP_VECTOR__:		type = weak,	value = $0221;						#NMI
}
