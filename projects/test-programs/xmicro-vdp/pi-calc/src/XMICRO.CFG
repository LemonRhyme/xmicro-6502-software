##############################################################################
#
# LD65 Linker configuration for XMICRO-6502 ROM images
#
##############################################################################

MEMORY {
	ZP:	start = $0000,	size = $0100,	type = rw,	define = yes;
	STACK:	start = $0100,	size = $0100,	type = ro;
	VT:	start = $0200,	size = $0200,	type = rw;
	PRAM:	start = $0400,	size = $6C00,	type = rw;
	IO:	start = $7000,	size = $1000,	type = rw;
	ROM:	start = $F000,	size = $1000,	type = ro,	bank = $01;

	BANK00:	start = $8000,	size = $8000,	type = rw,	bank = $00;
	BANK01:	start = $8000,	size = $7000,	type = rw,	bank = $01,	define = yes,	file = "AUTOEXEC.BIN";
	BANK02:	start = $8000,	size = $8000,	type = rw,	bank = $02;
	BANK03:	start = $8000,	size = $8000,	type = rw,	bank = $03;
	BANK04:	start = $8000,	size = $8000,	type = rw,	bank = $04;
	BANK05:	start = $8000,	size = $8000,	type = rw,	bank = $05;
	BANK06:	start = $8000,	size = $8000,	type = rw,	bank = $06;
	BANK07:	start = $8000,	size = $8000,	type = rw,	bank = $07;
	BANK08:	start = $8000,	size = $8000,	type = rw,	bank = $08;
	BANK09:	start = $8000,	size = $8000,	type = rw,	bank = $09;
	BANK0A:	start = $8000,	size = $8000,	type = rw,	bank = $0A;
	BANK0B:	start = $8000,	size = $8000,	type = rw,	bank = $0B;
	BANK0C:	start = $8000,	size = $8000,	type = rw,	bank = $0C;
	BANK0D:	start = $8000,	size = $8000,	type = rw,	bank = $0D;
	BANK0E:	start = $8000,	size = $8000,	type = rw,	bank = $0E;
	BANK0F:	start = $8000,	size = $8000,	type = rw,	bank = $0F;
	BANK10:	start = $8000,	size = $8000,	type = rw,	bank = $10;
	BANK11:	start = $8000,	size = $7000,	type = rw,	bank = $11;
	BANK12:	start = $8000,	size = $8000,	type = rw,	bank = $12;
	BANK13:	start = $8000,	size = $8000,	type = rw,	bank = $13;
	BANK14:	start = $8000,	size = $8000,	type = rw,	bank = $14;
	BANK15:	start = $8000,	size = $8000,	type = rw,	bank = $15;
	BANK16:	start = $8000,	size = $8000,	type = rw,	bank = $16;
	BANK17:	start = $8000,	size = $8000,	type = rw,	bank = $17;
	BANK18:	start = $8000,	size = $8000,	type = rw,	bank = $18;
	BANK19:	start = $8000,	size = $8000,	type = rw,	bank = $19;
	BANK1A:	start = $8000,	size = $8000,	type = rw,	bank = $1A;
	BANK1B:	start = $8000,	size = $8000,	type = rw,	bank = $1B;
	BANK1C:	start = $8000,	size = $8000,	type = rw,	bank = $1C;
	BANK1D:	start = $8000,	size = $8000,	type = rw,	bank = $1D;
	BANK1E:	start = $8000,	size = $8000,	type = rw,	bank = $1E;
	BANK1F:	start = $8000,	size = $8000,	type = rw,	bank = $1F;
}

SEGMENTS {
	ZEROPAGE:	load = ZP,	type = zp,	define = yes;
	STARTUP:	load = BANK01,	type = ro,	define = yes;
	ONCE:		load = BANK01,	type = ro,	optional = yes;
	CODE:		load = BANK01,	type = rw;
	LOWCODE:	load = BANK01,	type = rw,	optional = yes,	define = yes,	run = PRAM;
	DATA:		load = BANK01,	type = rw,	define = yes;
	RODATA:		load = BANK01,	type = ro;
	BSS:		load = BANK01,	type = bss,	define = yes;
	HEAP:		load = BANK01,	type = bss,	optional = yes;

}

FEATURES {
	CONDES:	segment = STARTUP,
		type    = constructor,
		label   = __CONSTRUCTOR_TABLE__,
		count   = __CONSTRUCTOR_COUNT__;
	CONDES:	segment = STARTUP,
		type    = destructor,
		label   = __DESTRUCTOR_TABLE__,
		count   = __DESTRUCTOR_COUNT__;

	STARTADDRESS:	default = $F000;
}

SYMBOLS {
	# Define the stack size for the application
	__STACKSIZE__:  type = weak, value = $0200;
}
