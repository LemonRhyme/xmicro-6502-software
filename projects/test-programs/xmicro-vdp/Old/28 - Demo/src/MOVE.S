;-----------------------------------------------------------------------------
; MOVE.S
; BLOCK MEMORY MOVE PROCEDURES
; ADAPTED FROM HTTP://WWW.6502.ORG/SOURCE/GENERAL/MEMORY_MOVE.HTML
;-----------------------------------------------------------------------------

.INCLUDE "INSTRUCTIONS.MAC"

.EXPORT MOVEDOWN, ZERO_FILL, MOVESTREAM			;PROCEDURES
.EXPORTZP MOVE_FROM, MOVE_TO, MOVE_SIZE		;ZERO-PAGE VARIABLES

.SEGMENT "ZEROPAGE"
	MOVE_FROM:	.RES 2
	MOVE_TO:	.RES 2
	MOVE_SIZE:	.RES 2

.SEGMENT "CODE"

;-----------------------------------------------------------------------------
; MOVEDOWN
; COPIES A BLOCK OF MEMORY STARTING AT THE LOWEST ADDRESS
; *CAN'T BE USED ON OVERLAPPING BLOCKS WHERE THE DESTINATION IS HIGHER*
;
; MOVE_FROM = SOURCE START ADDRESS
; MOVE_TO = DESTINATION START ADDRESS
; MOVE_SIZE = NUMBER OF BYTES TO MOVE
;-----------------------------------------------------------------------------
.PROC MOVEDOWN
	PUSH_AXY
	LDY #00
	LDX MOVE_SIZE+1
	BEQ MD2
MD1:	LDA (MOVE_FROM),Y	;MOVE A PAGE AT A TIME
	STA (MOVE_TO),Y
	INY
	BNE MD1
	INC MOVE_FROM+1
	INC MOVE_TO+1
	DEX
	BNE MD1
MD2:	LDX MOVE_SIZE
	BEQ MD4
MD3:	LDA (MOVE_FROM),Y	;MOVE THE REMAINING BYTES
	STA (MOVE_TO),Y
	INY
	DEX
	BNE MD3
MD4:	PULL_AXY
	RTS
.ENDPROC


;-----------------------------------------------------------------------------
; MOVEDOWN
; COPIES A BLOCK OF MEMORY STARTING AT THE LOWEST ADDRESS
; *CAN'T BE USED ON OVERLAPPING BLOCKS WHERE THE DESTINATION IS HIGHER*
;
; MOVE_FROM = SOURCE START ADDRESS
; MOVE_TO = DESTINATION START ADDRESS
; MOVE_SIZE = NUMBER OF BYTES TO MOVE
;-----------------------------------------------------------------------------
.PROC MOVESTREAM
	PUSH_AXY
	LDY #00
	LDX MOVE_SIZE+1
	BEQ MD2
MD1:	LDA (MOVE_FROM),Y	;MOVE A PAGE AT A TIME
	PHY
	LDY #$00
	STA (MOVE_TO),Y
	PLY
	INY
	BNE MD1
	INC MOVE_FROM+1
	DEX
	BNE MD1
MD2:	LDX MOVE_SIZE
	BEQ MD4
MD3:	LDA (MOVE_FROM),Y	;MOVE THE REMAINING BYTES
	PHY
	LDY #$00
	STA (MOVE_TO),Y
	PLY
	INY
	DEX
	BNE MD3
MD4:	PULL_AXY
	RTS
.ENDPROC

;-----------------------------------------------------------------------------
; ZEROFILL
; COPIES ALL ZEROS TO SPECIFIED RANGE
; MOVE_TO = DESTINATION START ADDRESS
; MOVE_SIZE = NUMBER OF BYTES TO ZERO
;-----------------------------------------------------------------------------
.PROC ZERO_FILL
	PUSH_AXY
	LDA #$00
	TAY
	LDX MOVE_SIZE+1
	BEQ L2
L1:	STA (MOVE_TO),Y
	INY
	BNE L1
	INC MOVE_TO+1
	DEX
	BNE L1
L2:	LDX MOVE_SIZE
	BEQ L4
L3:	STA (MOVE_TO),Y
	INY
	DEX
	BNE L3
L4:	PULL_AXY
	RTS
.ENDPROC
