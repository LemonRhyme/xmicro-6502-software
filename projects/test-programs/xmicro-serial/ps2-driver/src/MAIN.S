.PC02

.INCLUDE "INSTRUCTIONS.MAC"
.INCLUDE "XMSERIAL.MAC"

.MACRO NOPS N
	.REPEAT N
		NOP
	.ENDREPEAT
.ENDMACRO

.MACRO WREG VAL, REG
	LDA VAL
	STA VDP+1
	LDA #$80+REG
	STA VDP+1
.ENDMACRO

.MACRO WAIT N
.LOCAL @1
	PHX
	PHY
	LDX #$00
	LDY #$00
@1:	.REPEAT N
		NOP
	.ENDREPEAT
	DEX
	BNE @1
	DEY
	BNE @1
	PLY
	PLX
.ENDMACRO


.SEGMENT "ZEROPAGE"
	SECONDS_BUFFER:	.RES 2
	MOVE_FROM:	.RES 2
	MOVE_TO:	.RES 2
	MOVE_SIZE:	.RES 2
	KEY_FLAGS:	.RES 1			;BIT 7 IS THE SHIFT FLAG, BIT 6 IS CAPS?
	KEY_STATES:	.RES 1			;LSHIFT, RSHIFT, LCTRL, RCTRL, LALT, RALT, LWIN, RWIN

.SEGMENT "STARTUP"

	VDP = $7000
	XMICRO_MEMORY = $7100
	RTC = XMICRO_MEMORY+$10

_INIT:
	SEI
	CLC
	LDX #$FF
	TXS

;----RTC INIT---
	LDA #%00000000		;DISABLE INTERRUPTS
	STA RTC+$0C

	JSR XMSERIAL_INIT
	STZ KEY_FLAGS

;----VDP INIT----
	WREG #%00000000, 0	;$00, $80	;TEXT1 MODE
	WREG #%01010000, 1	;$50, $81
	WREG #%00000000, 2	;$00, $82	;PATTERN LAYOUT $00000 (TEXT 1)

;	WREG #%00000100, 0	;$04, $80	;TEXT2 MODE
;	WREG #%01010000, 1	;$50, $81
;	WREG #%00000011, 2	;$00, $82	;PATTERN LAYOUT $00000 (TEXT 2)

;	WREG #%00000100, 0	;$04, $80	;MC MODE
;	WREG #%01011000, 1	;$58, $81

	WREG #%00101111, 3
	WREG #%00000001, 4	;$01, $84	;PATTERN GENERATOR $00800
	WREG #%11110000, 7	;$F0, $87
	WREG #%00001000, 8	;$09, $88
	WREG #%00000000, 9	;$00, $89
	WREG #%00000000, 10

	WREG #%00000100, 25	;ENABLE WAIT OUTPUT

;----PALETTE REGISTER INIT----
	WREG #$FF, 16			;WHITE COLOR 04
	LDA #$77			;MSB RED LSB BLUE
	STA VDP+2
	LDA #$07			;LSB GREEN
	STA VDP+2

;----PATTERN LAYOUT INIT----
	WREG #%00000000, 14
 	MVA #%00000000, VDP+1
	MVA #%01000000, VDP+1		;SET UP ADDRESS ($0000), WRITE-MODE

	LDX #$00
	LDY #$9

	LDA #$20

@1:	STA VDP+0
	DEX
	BNE @1
	DEY
	BNE @1

;----PATTERN GENERATOR INIT----
PATTERN_GEN_INIT:

	MWA #FONT_TABLE, MOVE_FROM
	MWA #$0800, MOVE_SIZE

	WREG #%00000000, 14
	MVA #%00000000, VDP+1
	MVA #%01001000, VDP+1		;SET UP ADDRESS ($0800), WRITE-MODE

	;MVA #%00100000, VDP+0
	;NOPS 10

	LDY #00
	LDX MOVE_SIZE+1
	BEQ @MD2
@MD1:	LDA (MOVE_FROM),Y	;MOVE A PAGE AT A TIME
	STA VDP+0
	INY
	BNE @MD1
	INC MOVE_FROM+1
	DEX
	BNE @MD1
@MD2:	LDX MOVE_SIZE
	BEQ @MD4
@MD3:	LDA (MOVE_FROM),Y	;MOVE THE REMAINING BYTES
	STA VDP+0
	INY
	DEX
	BNE @MD3
@MD4:
	CLI
	JMP _MAIN

.SEGMENT "CODE"

_MAIN:
	WREG #%00000000, 14
	MVA #%00000000, VDP+1
	MVA #%01000000, VDP+1		;SET UP ADDRESS ($0000), WRITE-MODE

LOOP:
	JSR PS2_GETKEY
	CPY #$00
	BEQ LOOP

@1:	CPY #44
	BNE @2
	LDA #%10000000
	TSB KEY_STATES
	JMP MAKE_SHIFT
@2:	CPY #57
	BNE @3
	LDA #%01000000
	TSB KEY_STATES
	JMP MAKE_SHIFT
@3:	CPY #44+128
	BNE @4
	LDA #%10000000
	TRB KEY_STATES
	JMP BREAK_SHIFT
@4:	CPY #57+128
	BNE @5
	LDA #%01000000
	TRB KEY_STATES
	JMP BREAK_SHIFT

@5:	CPY #$00
	BMI LOOP

	LDA KEY_FLAGS
	BMI @SHIFT

@NORMAL:
	LDX ASCII_NORMAL_TABLE,Y
	BRA @PRINT
@SHIFT:
	LDX ASCII_SHIFT_TABLE,Y
	BRA @PRINT
@PRINT:
	CPX #$00
	BEQ LOOP

	STX VDP
	BRA LOOP

MAKE_SHIFT:
	LDA #%10000000
	STA KEY_FLAGS
	LDA #$ED
	JSR PS2_COMMAND
	LDA #%00000100
	JSR PS2_COMMAND
	BRA LOOP

BREAK_SHIFT:
	LDA KEY_STATES
	BIT #%11000000
	BNE LOOP
	STZ KEY_FLAGS
	LDA #$ED
	JSR PS2_COMMAND
	LDA #%00000000
	JSR PS2_COMMAND
	BRA LOOP

.SEGMENT "RODATA"
FONT_TABLE:	.INCBIN "MSXFONT.ALF", $07
